<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="4a327d6b-caae-412f-9155-15fd54faa70f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MO_Flow" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="4a327d6b-caae-412f-9155-15fd54faa70ffileName">MO_Flow</con:setting></con:settings><con:testStep type="groovy" name="Timwe_MO_Flow" id="57fd8266-f2ae-4576-85da-6545d3e263c4"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

def logFile=context.resultfile
Date date=new Date()
//OOVS_Timwe
def title=("\r\n"+date+"Executing>>>>>>>>>>>>>>>>>>>[OOVS][MO][ACT]"+context.getCurrentStep().getLabel()+"\r\n")
log.info title
logFile.append title
long timeoutPeriod=5000


// get a reference to the common util  TestSuite
def logapi = context.logAPI
//Dataset class object
def datasetobject = context.dataSet
def apirunobject=context.apiRun
def talendobject=context.talendApiRun

int tc=0
int pass=0
int fail=0

Map dataset  = new HashMap();
Map usersubmap  = new HashMap();

for (int i=1;i<= context.rowCount;i++)
{
	dataset=datasetobject.getRowDataMap(i)	
  	if(dataset.get("isexecutable")) 
	{    tc++
		msisdn= dataset.get("userid")
						
            //reset user 		
		datasetobject.resetUser(msisdn)
		
	  //make user entry in free trial history
 datasetobject.freeTrialHisotry(msisdn,"1",dataset.get("lastfreetrialtime"),'1202000024')
talendobject.OOVS_MO_Rx(dataset.get("ppid"),msisdn,dataset.get("keyword"),"MOTx70495740957")
//get last billing request trnx id
 String extTrnxId;
  if(dataset.get("isfreetrial"))
 {
 	extTrnxId="null"
 	
 }
 else{
 	
def startTime=System.currentTimeMillis();
 	while(true){
 //get last billing request trnx id
extTrnxId=  datasetobject.getLastRequestTrnxId(msisdn, dataset.get("customerid"));

long currentTime = System.currentTimeMillis();
if(extTrnxId=="0"){
			if((currentTime-startTime)<timeoutPeriod){
				sleep(500);
				
			}else
			{
				log.info "Request is taking too long to process record"
				break;
			}
}
else{
	break;
}
 }
 	}
 //log.info "extTrnxId="+extTrnxId 
 if(dataset.get("isdn")){
 	
 talendobject.OOVS_DN_Rx(dataset.get("ppid"),msisdn,extTrnxId,dataset.get("txid"),dataset.get("deliStatusId"));
 }
		
		//validate DB values       	
 usersubmap= datasetobject.getUserData(msisdn,dataset.get("itemid"))
 
//assert the response & db values
if(
usersubmap.get("subscription_status_id").toString() == dataset.get("expid")
&& usersubmap.get("validity").toString() == dataset.get("expval")
&& usersubmap.get("current_billing_code").toString() == dataset.get("expbillcode")
&& usersubmap.get("user_source").toString() == "SMS"
&&  usersubmap.get("credits").toString()==dataset.get("expcredits")
&& usersubmap.get("last_notification_status_id").toString()==dataset.get("statusid")
) 
{   
//calling log api test method	

def log_act_notify= logapi.assertBaaSLogAPI(msisdn,"ACTIVATION_CHARGING_NOTIFICATION","3","3",dataset.get("activityres").toString(),dataset.get("expid"),
dataset.get("expbillcode"),"1",dataset.get("prebillcode"),dataset.get("expaccmode"),dataset.get("expchargemode"),dataset.get("isfreetrial").toString()
,dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),"40",null,dataset.get("expdnstatus"),dataset.get("expdndesc"),dataset.get("reqbillcode"),dataset.get("reqpp"),extTrnxId) 

//print result
def passresult= ("\r\n"+"[OOVS][MO][ACT]"+dataset.get("tcname") +" bass test: passed  >>> act_charging_notification_log: "+log_act_notify+"\r\n")
logFile.append passresult
log.info passresult

if (log_act_notify=="passed") {pass++} 
else if(log_act_notify=="failed") {
	fail++
	log.error "Expected >>>" +context.expected
   log.error "Found >>>" + context.actual
   }
   else{fail++}
}

else{ 	
    fail++
def failresult=  ("\r\n"+"[OOVS][MO][ACT]"+dataset.get("tcname") +"  is failed" +"\r\n")
def expected=  ( "\r\n"+"Expected Values:"+"  sub_status_id="+dataset.get("expid")+",Validity="+dataset.get("expval")+
",curr_billing_code="+dataset.get("expbillcode")+",user_source=SMS"+" credits="+dataset.get("expcredits")+
"last_notification_status_id="+dataset.get("activityres")+"\r\n")

def actual=  ("\r\n"+"But Found:"+" sub_status_id="+usersubmap.get("subscription_status_id")+",Validity="+usersubmap.get("validity")+ 
",curr_billing_code="+usersubmap.get("current_billing_code")+",user_source=" +usersubmap.get("user_source")+"credits="+usersubmap.get("credits")+
 "last_notification_status_id="+usersubmap.get("last_notification_status_id")+"\r\n")

log.error failresult
log.error expected
log.error actual
logFile.append failresult+"\r\n"+expected +"\r\n" + actual
	} }} 

def summary=  ("\r\n"+date+" Execution Summary of [OOVS][MO][ACT] "+context.getCurrentStep().getLabel()+"\r\n" + "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary

]]></script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

def workspace = testRunner.testCase.testSuite.project.workspace

def lib = (workspace==null) ? 
  ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew(context.expand('${projectDir}')+"/BaaS-Util.xml") :  workspace.getProjectByName("BaaS_Util")
if(!lib.open &amp;&amp; workspace!=null) 
{workspace.openProject(lib)
}

lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Log API"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["DataSet"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Backend Job"].run(testRunner, context)

lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['API Run'].run(testRunner, context)

lib.testSuites['Common Util'].testCases['Talend_API'].testSteps["Talend_API_Run"].run(testRunner, context)

def datasetobject = context.dataSet

String inputFile = context.expand('${#Global#input_path}')+ testRunner.testCase.testSuite.name+".xlsx"

datasetobject.getExcelDataIndex(inputFile,testRunner.testCase.name)

//establish db connection
datasetobject.getDBConnection()
</con:setupScript><con:properties><con:property><con:name>msisdn</con:name><con:value>tel:743047304</con:value></con:property><con:property><con:name>action</con:name><con:value>SUB</con:value></con:property></con:properties><con:reportParameters/></con:testCase>