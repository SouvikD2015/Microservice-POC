<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="346a4066-20f3-43f8-8f70-0c1b428d1a80" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Base_Recon" searchProperties="true" disabled="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="346a4066-20f3-43f8-8f70-0c1b428d1a80fileName">Base_Recon</con:setting></con:settings><con:testStep type="groovy" name="Verify base recon by SM" id="2ed9fc79-8918-4857-87ee-b3a9e077e07f" disabled="true"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

Date date=new Date()
def logFile=context.resultfile
def title=("\r\n"+date+"Executing>>>>>>>>>>>>>>>>>>>"+context.getCurrentStep().getLabel()+"\r\n")
log.info  title
logFile.append  title

def logapi = context.logAPI
def lcmobject=context.lcmRun
def datasetobject = context.dataSet
def apirunobject=context.apiRun

Map<String,String>  dataset  = new HashMap<String,String> ();
Map<String,String>  blacklistmap  = new HashMap<String,String> ();
int tc=0
int pass=0
int fail=0

 //iteratig excel sheet rows to execute the test case 
for (int i=1;i<= context.rowCount;i++)
{

  dataset=datasetobject.getRowDataMap(i)	
  	if(dataset.get("isexecutable") && !dataset.get("whitelist")  )
	{	
		tc++;		
		msisdn= dataset.get("userid")
		//reset user 		
		datasetobject.removeBlackList(msisdn.toString(),dataset.get("customerid").toString())
		datasetobject.resetUser(msisdn)
	
	try {			
			
	     //baas do blacklist api execution 	
          apirunobject.doBlackList(msisdn.toString(),dataset.get("customerid").toString(),"false")
          
          //get API Json Response context
          def  responseJson= context.blackListJson          
	     def responseCode=responseJson.responseCode
	     def responseMessage= responseJson.message
	     def responseUserid= responseJson.userId	    
	
	//get blacklist user status
	apirunobject.getBlackListStatus(msisdn.toString(),dataset.get("customerid").toString())
	//get API Json Response context
          def  statusJson= context.blackListStatusJson           
	     def statusCode=statusJson.responseCode	     
	     def statusMessage= statusJson.message	     
	     def statusUserid= statusJson.userId
	     def startdate=statusJson.startDate
	     def enddate=statusJson.endDate

//call LCM activation API for blacklisted user and verify response
 lcmobject.stepLcmACT(msisdn,dataset.get("billingcode"),"Success","TX47937493934739")
      jsonResponse= context.jsonStepLcmACT	

//validate DB values       	
 blacklistmap= datasetobject.getBlackListStatus(msisdn.toString(),dataset.get("customerid").toString())

//assert the response & db values
if(
	jsonResponse.responseMessage==dataset.get("apimessage")
	&&jsonResponse.responseCode==dataset.get("apicode")
	&&responseCode==dataset.get("responsecode")
	&&statusCode==dataset.get("responsecode")
	&& responseMessage==dataset.get("message")
	&&statusMessage==dataset.get("message")
	&&startdate!=enddate
	&& responseUserid==msisdn
	&&statusUserid==msisdn
	&& blacklistmap.get("period").toString()==dataset.get("expperiod")
	&& blacklistmap.get("unit")==dataset.get("expunit")
      && blacklistmap.get("validity").toString()==dataset.get("expvalidity")	
){
	pass++
def passresult= ("\r\n"+"[Blacklist]"+dataset.get("tcname")+ " for customer id="+dataset.get("customerid")+"  is passed" +"\r\n")
log.info passresult
logFile.append passresult}

else { 	
    fail++
    def failresult=  ("\r\n"+"[Blacklist]"+dataset.get("tcname") + " for customer id="+dataset.get("customerid")+"  is failed"+"\r\n")

def actual="Actual: responseMessage=" +jsonResponse.responseMessage +" jsonResponse="+jsonResponse.responseCode  +" responseCode="+responseCode +"statusCode="+ statusCode +"responseMessage="+ responseMessage +" statusMessage="+ statusMessage +"period="+  blacklistmap.get("period")+"unit="+ blacklistmap.get("unit") +"validity="+blacklistmap.get("validity")
def expected="Expected: responseMessage=" +dataset.get("apimessage") +" jsonResponse="+dataset.get("apicode") +" responseCode"+dataset.get("responsecode") +"statusCode="+ dataset.get("responsecode") +"responseMessage="+ dataset.get("message")  +" statusMessage="+ dataset.get("message")+"period"+  dataset.get("expperiod") +"unit"+ dataset.get("expunit") +"validity"+dataset.get("expvalidity")	
log.error failresult
log.error expected
log.error actual
logFile.append failresult+"\r\n"+expected +"\r\n" + actual
}
}
		catch(Exception ex){

			def errormsg="\r\n" +">>>>>>>>>>>>>>>>>>>>>>>>>>>>>API Response is not proper<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"+"\r\n" 
			logFile.append errormsg
			log.error errormsg
		     }
	}
	}
	
def summary=  ("\r\n"+date+" Execution Summary of "+context.getCurrentStep().getLabel()+"\r\n" + "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Verify base recon by file" id="ee9970b1-c30b-4c61-8859-99f3b3d3777f"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

Date date=new Date()
def logFile=context.resultfile
def title=("\r\n"+date+"Executing>>>>>>>>>>>>>>>>>>>"+context.getCurrentStep().getLabel()+"\r\n")
log.info  title
logFile.append  title

def logapi = context.logAPI
def lcmobject=context.lcmRun
def datasetobject = context.dataSet
def apirunobject=context.apiRun

Map<String,String>  dataset  = new HashMap<String,String> ();
Map<String,String>  blacklistmap  = new HashMap<String,String> ();
int tc=0
int pass=0
int fail=0
long timeoutPeriod=5000

 //iteratig excel sheet rows to execute the test case 
for (int i=1;i<= context.rowCount;i++)
{

  dataset=datasetobject.getRowDataMap(i)	
  	if(dataset.get("isexecutable")   )
	{	
		tc++;		
		msisdn= dataset.get("msisdn")
		//reset user 		
		datasetobject.resetUser(msisdn)
		if(dataset.get('isdbinsert')){
	datasetobject.createUser(dataset.get("customerid"),dataset.get("providerid"),msisdn,dataset.get("billingcode"),dataset.get("subbillingcode"),dataset.get("currbillingcode"),
	dataset.get("substate"),dataset.get("startdate"),dataset.get("enddate"),dataset.get("subdate"),dataset.get("source"),'null',dataset.get("currcredit")
	,msisdn,dataset.get("br_itemid"),dataset.get("br_itemtypeid"),"1","kp=test_baserecon",'0','0',"0","1","1","1")
		}
	
	//try {			
          lcmobject.baseRecon( msisdn, dataset.get('br_billingcode'),dataset.get('br_activityresult'),"BR4639463",dataset.get('br_accessmode'), dataset.get('br_chargingmode'), 
          dataset.get('br_target'),
          dataset.get('br_itemid'),
          dataset.get('br_itemtypeid'),
          dataset.get('br_responsecode'),
          dataset.get('br_responsemessage'))
          
          //get API Json Response context
//          def  responseJson= context.blackListJson          
//	     def responseCode=responseJson.responseCode
//	     def responseMessage= responseJson.message
//	     def responseUserid= responseJson.userId	    
def startTime=System.currentTimeMillis();
while(true){
//validate DB values
usersubmap= datasetobject.getUserData(msisdn,dataset.get("br_itemid"))
log.info usersubmap.get("subscription_status_id")
if(usersubmap.get("subscription_status_id").toString()==dataset.get('expid') )
	{
		break;
	}
	else{
		long currentTime = System.currentTimeMillis();
		if((currentTime-startTime)<timeoutPeriod){
				sleep(500);
				log.info "waiting for record to process"
				
			}else
			{
				log.error "Queue is taking too long to process record or last billing response status id did not match"
				break;
			}
	}}
//assert the response & db values
if(
	
	usersubmap.get('subscription_status_id').toString()==dataset.get('expid')
	&&usersubmap.get('validity').toString()==dataset.get('expval')
){
	pass++
def passresult= ("\r\n"+"[Base_Recon]"+dataset.get("tcname")+ " is passed" +"\r\n")
log.info passresult
logFile.append passresult}

else { 	
    fail++
    def failresult=  ("\r\n"+"[Base_Recon]"+dataset.get("tcname") + "  is failed"+"\r\n")

StringBuffer expected= new StringBuffer('Expected Values : ')
expected.append('subscription_staus_id='+dataset.get('expid'))
expected.append('validity='+dataset.get('expval')+"\r\n")


StringBuffer actual= new StringBuffer('Found Values= ')
actual.append('subscription_staus_id='+usersubmap.get('subscription_status_id'))
actual.append('validity='+usersubmap.get('validity')+"\r\n")

log.error failresult
log.error expected
log.error actual
logFile.append failresult+"\r\n"+expected +"\r\n" + actual
}
//}
//		catch(Exception ex){
//
//			def errormsg="\r\n" +">>>>>>>>>>>>>>>>>>>>>>>>>>>>>API Response is not proper<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"+"\r\n" 
//			logFile.append errormsg
//			log.error errormsg
//		     }
	}
	}
	
def summary=  ("\r\n"+date+" Execution Summary of "+context.getCurrentStep().getLabel()+"\r\n" + "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary
]]></script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

def workspace = testRunner.testCase.testSuite.project.workspace

def lib = (workspace==null) ? 
  ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew(context.expand('${projectDir}')+"/BaaS-Util.xml") :  workspace.getProjectByName("BaaS_Util")
if(!lib.open &amp;&amp; workspace!=null) 
{workspace.openProject(lib)
}

lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Log API"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["DataSet"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Backend Job"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['API Run'].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Talend_API'].testSteps["Talend_API_Run"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['LCM Run'].run(testRunner, context)

def datasetobject = context.dataSet

String inputFile = context.expand('${#Global#input_path}')+ testRunner.testCase.testSuite.name+".xlsx"

datasetobject.getExcelDataIndex(inputFile,testRunner.testCase.name)

//establish db connection
datasetobject.getDBConnection()
</con:setupScript><con:properties/><con:reportParameters/></con:testCase>