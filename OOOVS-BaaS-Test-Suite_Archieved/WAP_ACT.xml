<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="f7c2e597-3095-41cc-87d5-e17b18ecb615" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="WAP_ACT" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="f7c2e597-3095-41cc-87d5-e17b18ecb615fileName">WAP_ACT</con:setting></con:settings><con:testStep type="groovy" name="Verify Activation flow" id="2c531c74-3099-488b-bb51-fe576fe87130"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

Date date=new Date()
def logFile=context.resultfile
def title=("\r\n"+date+"Executing>>>>>>>>>>>>>>>>>>>[OOVS][WAP][ACT]"+context.getCurrentStep().getLabel()+"\r\n")
log.info  title
logFile.append  title

//Log API class object
def logapi = context.logAPI
//Dataset class object
def datasetobject = context.dataSet
//API execution class object
def apirunobject=context.apiRun

Map<String,String>  dataset  = new HashMap<String,String> ();
Map<String,String>  userdump  = new HashMap<String,String> ();
int tc=0
int pass=0
int fail=0
def expected2ndConf
def actual2ndConf
def expectedActNotification
def actualActNotification
 //iteratig excel sheet rows to execute the test case 
for (int i=1;i<= context.rowCount;i++)
{
def isFreeTrial
def cgBillCode
  dataset=datasetobject.getRowDataMap(i)	
  	if(dataset.get("isexecutable")  )
	{	
		tc++;		
		msisdn= dataset.get("userid")
		//reset user 		
		datasetobject.resetUser(msisdn)

	  //make user entry in free trial history
          datasetobject.freeTrialHisotry(msisdn,"1",dataset.get("lastfreetrialtime"),"1202000024")	
	try {			
		//baas get Status API execution
		apirunobject.stepGetUserStatus(msisdn,dataset.get("customerid"))
		
		def  slurperStepStatus= context.jsonStepStatus
		if(slurperStepStatus.additionalInfo !=null)	
		{
	      isFreeTrial= slurperStepStatus.additionalInfo.freeTrialEnabled 

	           }
	     else
	     {
	     	isFreeTrial="false"
	     }
	     	           
		//baas activation api execution 	
          apirunobject.stepInitiliazer(msisdn,dataset.get("billingcode"),dataset.get("source"),dataset.get("trnxid") ,dataset.get("adnetid"),
          dataset.get("adtrnxid"),dataset.get("languageid"),"1","2",dataset.get("aft").toString())
          
          
          //get API Json Response context
          def  slurperStepInitialise= context.jsonStepInitialise          
	     def  responseStatus= slurperStepInitialise.result.status
	     def responseCode=slurperStepInitialise.result.code
	     def responseMessage= slurperStepInitialise.result.message
	     def responseMsisdn=slurperStepInitialise.userStatus.msisdn
	     def cgUrl=slurperStepInitialise.cgURL
	            	
  String cgUrlDecoded = URLDecoder.decode(cgUrl, "UTF-8");
      def param=cgUrlDecoded.split("[?]")
       transid = (param[2]).split("=")[1]

               
 //baas Cg controller execution 
apirunobject.CGController(transid,dataset.get('providerid'))      
	 
//validate DB values       	
 userdump= datasetobject.getUserData(msisdn,"1")
   
//assert the response & db values
if(
isFreeTrial== dataset.get("isfreetrial").toString()
&& responseStatus=="OK"
&& responseCode=="VE002"
&& responseMessage=="Consent Redirect" 
&&responseMsisdn==msisdn
&& userdump.get("subscription_status_id").toString()==dataset.get("expid").toString()
&& userdump.get("validity").toString() == dataset.get("expval")
&& userdump.get("current_billing_code").toString() == dataset.get("expbillcode")
&& userdump.get("user_source").toString() == dataset.get("source")
&& userdump.get("credits").toString()==dataset.get("expcredits")
&& userdump.get("user_preferred_language").toString()==dataset.get("languageid")
&& userdump.get("preferred_language").toString()==dataset.get("preferredlanguageid")
) 
{   	//calling log api test method	

def log_2nd_conf= logapi.assertBaaSLogAPI(msisdn,"PAGEVIEW_LOG_2nd_CONF","2","2",dataset.get("2ndconfactivityres").toString(),"1",
dataset.get("prebillcode"),"1",dataset.get("prebillcode"),dataset.get("expaccmode"),dataset.get("expchargemode"),dataset.get("freetrialflag").toString(),
 dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),"30")  
 	
if (log_2nd_conf=="failed")
{
 expected2ndConf=context.expected
 actual2ndConf=context.actual}

def log_act_notify= logapi.assertBaaSLogAPI(msisdn,"ACTIVATION_CHARGING_NOTIFICATION","3","3",dataset.get("activityres").toString(),dataset.get("expid"),
dataset.get("expbillcode"),"1",dataset.get("prebillcode"),dataset.get("expaccmode"),dataset.get("expchargemode"),dataset.get("freetrialflag").toString()
,dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),"40") 

if (log_act_notify=="failed"){
 expectedActNotification=context.expected
 actualActNotification=context.actual}

// validate ad network logs
if(dataset.get("adnetinfo")){
	
ad_network_log=logapi.assertAdNetworkInfo(msisdn,"ACTIVATION_CHARGING_NOTIFICATION",dataset.get("adnetid"),dataset.get("adtrnxid"))
}

else {ad_network_log= "NA"}

//print result
def passresult= ("\r\n"+"[OOVS][WAP][ACT]"+dataset.get("tcname") +" bass test: passed"+">>>>>>>>>>>2nd_conf_log:  "+log_2nd_conf+">>>>>>>>>> act_charging_notification_log: "+log_act_notify+">>>>>>>>>> adnetwork_info_log: "+ad_network_log+"\r\n")
log.info passresult
logFile.append passresult
if (log_act_notify=="passed" &&  log_2nd_conf=="passed" && (ad_network_log=="passed"  || ad_network_log=="NA" ||  ad_network_log== "no record found in log api db" )) {pass++} 
else {fail++
   if(log_2nd_conf=="failed"){
   log.error "Expected_2nd_Conf>>>>>>>>>>" +expected2ndConf
   log.error "Found_2nd_Conf>>>>>>>>>>" + actual2ndConf}
	
	if(log_act_notify=="failed"){
   log.error "Expected_ACT_Notification>>>>>>>>>>" +expectedActNotification
   log.error "Found_ACT_Notification>>>>>>>>>>" + actualActNotification}  
   
   if(ad_network_log=="failed"){
   log.error "Expected_Ad_Notification>>>>>>>>>>" +context.expectedAdLog
   log.error "Found_Ad_Notification>>>>>>>>>>" + context.actualAdLog}
}}  	

else{ 	
    fail++
    
def failresult="\r\n"+"***********************************"+"[OOVS][WAP][ACT]"+dataset.get("tcname") +"  is Failed" +"******************************************"+"\r\n"
def expected=( "\r\n"+"Expected Values:"+" isFreeTrial>>"+dataset.get("isfreetrial")+"  sub_status_id="+dataset.get("expid")+",Validity="+dataset.get("expval")+",curr_billing_code="+dataset.get("expbillcode")+",user_source=" +dataset.get("source")+" credits="+dataset.get("expcredits")+" expResponseStatus==OK, expResponseCode==VE002, expResponseMessage==Consent Redirect"+"responseMsisdn="+msisdn+"user_preferred_language="+dataset.get("languageid")+"preferred_language="+dataset.get("preferredlanguageid")+"\r\n")
def actual=  ("\r\n"+"But Found:"+"     isFreeTrial>>"+isFreeTrial+"    sub_status_id="+userdump.get("subscription_status_id")+",Validity="+userdump.get("validity")+ ",curr_billing_code="+userdump.get("current_billing_code")+",user_source=" +userdump.get("user_source")+"credits="+userdump.get("credits")+"responsestatus="+responseStatus+"responseCode= "+responseCode+"responseMessage="+responseMessage+"responseMsisdn="+responseMsisdn+"user_preferred_language="+userdump.get("user_preferred_language")+"preferred_language="+userdump.get("preferred_language")+"\r\n")
log.error failresult
log.error expected
log.error actual
logFile.append failresult+"\r\n"+expected +"\r\n" + actual
	} }
		catch(Exception ex){

			def errormsg=">>>>>>>>>>>>>>>>>>>>>>>>>>>>>API Response is not proper<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"+dataset.get("tcname")
			logFile.append errormsg
			log.error errormsg
		                    }
	}}
def summary=  ("\r\n"+date+" Execution Summary of "+context.getCurrentStep().getLabel()+"\r\n" + "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary]]></script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

def workspace = testRunner.testCase.testSuite.project.workspace

def lib = (workspace==null) ? 
  ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew(context.expand('${projectDir}')+"/BaaS-Util.xml") :  workspace.getProjectByName("BaaS_Util")
if(!lib.open &amp;&amp; workspace!=null) 
{workspace.openProject(lib)
}

lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Log API"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["DataSet"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Backend Job"].run(testRunner, context)

lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['API Run'].run(testRunner, context)

lib.testSuites['Common Util'].testCases['Talend_API'].testSteps["Talend_API_Run"].run(testRunner, context)

def datasetobject = context.dataSet
//read excel data column index
String inputFile = context.expand('${#Global#input_path}')+ testRunner.testCase.testSuite.name+".xlsx"
datasetobject.getExcelDataIndex(inputFile,testRunner.testCase.name)

//establish db connection
datasetobject.getDBConnection()
com.eviware.soapui.impl.wsdl.support.http.HttpClientSupport.httpClient.params.setParameter( "http.protocol.allow-circular-redirects", true )

</con:setupScript><con:properties/><con:reportParameters/></con:testCase>