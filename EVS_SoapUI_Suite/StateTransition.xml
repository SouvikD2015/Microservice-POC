<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="76ea4a2b-2281-41b3-89f2-c28db67ad1a0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="StateTransition" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:description>This will validate the user state tranistions based on the Carrier response received. </con:description><con:settings><con:setting id="76ea4a2b-2281-41b3-89f2-c28db67ad1a0fileName">StateTransition</con:setting></con:settings><con:testStep type="groovy" name="User States Transition Flow" id="751ed485-2e08-4fcf-b5f8-d806c1352d71"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.sql.Sql 
import java.io.*
import java.text.*
import java.util.*

//Log API class object
def logapi = context.logAPI
//Dataset class object
def datasetobject = context.dataSet
//API execution class object
def apirunobject=context.apiRun
def talendobject=context.talendApiRun

Date date=new Date()
def logFile=context.resultfile

def title=("\r\n"+date+"Executing>>>>>>>>>>>>>>>>>>>[EVS][BACKEND]"+context.getCurrentStep().getLabel()+"\r\n")
log.info title

Map<String,String>  dataset  = new HashMap<String,String> ();
Map<String,String>  usersubmap  = new HashMap<String,String> ();
int tc=0
int pass=0
int fail=0
def expected2ndConf
def actual2ndConf
def expectedActNotification
def actualActNotification
long timeoutPeriod=90000;

 //iteratig excel sheet rows to execute the test case 
for (int i=1;i<= context.rowCount;i++)
{
 dataset=datasetobject.getRowDataMap(i)	
  	if(dataset.get("isexecutable")  )
	{	
		tc++;		
		msisdn= dataset.get("userid")
		//reset user 		
		datasetobject.resetUser(msisdn)
		
//Create Test User
datasetobject.createUser(dataset.get("customerid"),dataset.get("customerid"),msisdn,dataset.get("billingcode"),dataset.get("billingcode"),dataset.get("currbillingcode"),dataset.get("substate"),
       dataset.get("startdate"),dataset.get("enddate"),dataset.get("subdate"),dataset.get("source"),"NULL","100",msisdn,"1","2","1","kp=evs_test")

//Notify on Talend end point     
	    def 	propertyNotify= testRunner.testCase.getTestStepByName("Properties")
      	propertyNotify.setPropertyValue("msisdn",msisdn)	 	
		propertyNotify.setPropertyValue("keyword",dataset.get("keyword"))
		propertyNotify.setPropertyValue("channel",dataset.get("channel"))
		propertyNotify.setPropertyValue("type",dataset.get("notifytype"))
		propertyNotify.setPropertyValue("amount",dataset.get("amount"))
		propertyNotify.setPropertyValue("packageid",dataset.get("package"))
		
		def 	stepNotifyRx= testRunner.testCase.getTestStepByName("EVS_Notify")	 
		stepNotifyRx.getHttpRequest().setEndpoint(context.expand('${#Global#talend_endpoint}'))    	 
	   	stepNotifyRx.run(testRunner,testRunner.getRunContext())	
	}}
for (int k=1;k<= context.rowCount;k++)
{
	def baas_api_log;
	def notifyResponse;
	
	 dataset=datasetobject.getRowDataMap(k)	
  	if(dataset.get("isexecutable")  )
	{	
				
		msisdn= dataset.get("userid")

def startTime=System.currentTimeMillis();
while(true){	   	
 //assert the response & db values
 usersubmap= datasetobject.getUserData(msisdn,"1")
if( usersubmap.get("last_notification_status_id").toString()==dataset.get("activityres"))
{
break;	
}
else{
		long currentTime = System.currentTimeMillis();
		if((currentTime-startTime)<timeoutPeriod){
				sleep(500);
				log.info "waiting for record to process"
				
			}else
			{
				log.error "Queue is taking too long to process record or last billing response status id did not match"
				break;
			}
	}
}
//validate DB values       	
 usersubmap= datasetobject.getUserData(msisdn,"1")
	if( 	usersubmap.get("subscription_status_id").toString() ==  dataset.get("expid") &&
 		usersubmap.get("validity").toString() ==  dataset.get("expval") &&
 		usersubmap.get("current_billing_code").toString() == dataset.get("expbillcode") &&
 		usersubmap.get("last_notification_status_id").toString()==dataset.get("notifyid") &&
 		notifyResponse== dataset.get("responsecode")
 		)
	{
	if(! (dataset.get("logtype").toString()=="NA")){	
		//dataset.get("expchargemode")
      baas_api_log= logapi.assertBaaSLogAPI(msisdn,dataset.get("logtype"),dataset.get("activitytype"),dataset.get("billingactionid"),dataset.get("activityres").toString(),dataset.get("expid") ,dataset.get("expbillcode"),
  	dataset.get("substate"), dataset.get("currbillingcode"),dataset.get("expaccmode"),dataset.get("expchargemode"),dataset.get("freetrialflag").toString()
  	,dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),dataset.get("sequence").toString(),null)}
  	
  	else
  	{
  		baas_api_log="NA"
  		
  		}
   def passresult =("\r\n"+"[EVS][BACKEND]"+dataset.get("tcname") +" bass test: passed"+">>>>>>>>>> user_baas_logAPI log: "+baas_api_log+"\r\n")
log.info passresult
logFile.append passresult
  	
  	if (baas_api_log=="passed" || baas_api_log=="NA")
  	{
  		pass++
  		} 
  	else if(baas_api_log=="failed")
  	{
  		fail++
  def expected= "Expected>>>>>>>>>>" +context.expected+"\r\n"
def actual="Found>>>>>>>>>>" + context.actual+"\r\n"
log.error expected
logFile.append  expected
log.error actual
logFile.append  actual
  	}
  	else if(baas_api_log=="no record found in log api db")
  	{
  		fail++
  	}
	}	 
	else{
		   fail++
 def failresult= ("\r\n"+k+"-***********************************[EVS][NOTIFICATION]"+dataset.get("tcname") +"  is failed" +"******************************************"+"\r\n")
log.info failresult
logFile.append failresult
def expected= ( "\r\n"+"Expected Values:sub_status_id="+dataset.get("expid")+",Validity="+dataset.get("expval")+",curr_billing_code="+dataset.get("expbillcode")+" notifyResponse="+ dataset.get("responsecode")+"\r\n")
log.error expected
logFile.append  expected
def actual= ("\r\n"+"But Found: sub_status_id="+usersubmap.get("subscription_status_id")+",Validity="+usersubmap.get("validity")+ ",curr_billing_code="+usersubmap.get("current_billing_code")+" notifyResponse="+notifyResponse+"\r\n")
log.error actual
logFile.append  actual
	} }} 
	

def summary=  ("\r\n"+date+" Execution Summary of "+context.getCurrentStep().getLabel()+"\r\n" + "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary

]]></script></con:config></con:testStep><con:testStep type="restrequest" name="EVS_Notify" id="4a715a13-92d9-436d-a34c-6860ab870710" disabled="true"><con:settings/><con:config service="EVS_Notify" resourcePath="/evs/notification" methodName="Notification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EVS_Notify" id="60c7c222-bdb8-4975-bf5a-1e439deeb94a" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.249.94:8088</con:endpoint><con:request><![CDATA[<Call_url><transaction_id1>137882224</transaction_id1><transaction_id2>null</transaction_id2><msisdn>${Properties#msisdn}</msisdn><package_id>${Properties#packageid}</package_id><TransactionType>${Properties#type}</TransactionType><Amount>${Properties#amount}</Amount><keyword>${Properties#keyword}</keyword><Channel>${Properties#channel}</Channel></Call_url>]]></con:request><con:originalUri>http://192.168.249.94/evs/notification</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="Properties" id="a72a8ae2-2ea6-4563-901e-5b97e7590e27"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>channel</con:name><con:value>DATAOnlineBanner</con:value></con:property><con:property><con:name>type</con:name><con:value>REN</con:value></con:property><con:property><con:name>msisdn</con:name><con:value>91971000031</con:value></con:property><con:property><con:name>amount</con:name><con:value>200</con:value></con:property><con:property><con:name>keyword</con:name><con:value>0</con:value></con:property><con:property><con:name>packageid</con:name><con:value>477</con:value></con:property></con:properties></con:config></con:testStep><con:setupScript>import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

def workspace = testRunner.testCase.testSuite.project.workspace

def lib = (workspace==null) ? 
  ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew(context.expand('${projectDir}')+"/BaaS-Util.xml") :  workspace.getProjectByName("BaaS_Util")
if(!lib.open &amp;&amp; workspace!=null) 
{workspace.openProject(lib)
}

lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Log API"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["DataSet"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Backend Job"].run(testRunner, context)

lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['API Run'].run(testRunner, context)

lib.testSuites['Common Util'].testCases['Talend_API'].testSteps["Talend_API_Run"].run(testRunner, context)

def datasetobject = context.dataSet

String inputFile = context.expand('${#Global#input_path}')+ testRunner.testCase.testSuite.name+".xlsx"

datasetobject.getExcelDataIndex(inputFile,testRunner.testCase.name)

//establish db connection
datasetobject.getDBConnection()
</con:setupScript><con:tearDownScript/><con:properties/><con:reportParameters/></con:testCase>