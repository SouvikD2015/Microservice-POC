<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="f871c5c0-2cb8-4e74-9a01-514f17e6c068" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ActivationFlow-Talend" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting><con:setting id="f871c5c0-2cb8-4e74-9a01-514f17e6c068fileName">ActivationFlow-Talend</con:setting></con:settings><con:testStep type="groovy" name="Verify VVA Activation Flow" id="5e400d89-fdb3-4a7d-b1e3-dd7ba1339507"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.sql.Sql 
import java.io.*
import java.text.*
import java.util.*
//Log API class object
def logapi = context.logAPI
//Dataset class object
def datasetobject = context.dataSet
def controllerobject=context.controllers
def apirunobject=context.apiRun
def talendobject=context.talendApiRun

Date date=new Date()
def logFile=context.resultfile

def title=("\r\n"+date+"Executing>>>>"+context.getCurrentStep().getLabel()+"\r\n")
log.info title
logFile.append title


Map<String,String>  dataset  = new HashMap<String,String> ();
Map<String,String>  usersubmap  = new HashMap<String,String> ();
int tc=0
int pass=0
int fail=0
def expected2ndConf
def actual2ndConf
def expectedActNotification
def actualActNotification
long timeoutPeriod = 5000;

 //iteratig excel sheet rows to execute the test case 
for (int i=1;i<= context.rowCount;i++)
{
def callbackResponse
def notifyResponse
  dataset=datasetobject.getRowDataMap(i)	
  	if(dataset.get("isexecutable")  )
	{	
	try {
		tc++;		
		msisdn= dataset.get("userid")
		//reset user 		
		datasetobject.resetUser(msisdn)
     
		//baas activation api execution 	
         // apirunobject.stepInitiliazer(msisdn,dataset.get("billingcode"),dataset.get("source"),dataset.get("itemId"),"1234","auth134","https://pbs.twimg.com/profile_images/560506128673406976/AzhajTXP.png")
        	apirunobject.stepInitiliazer(msisdn,dataset.get("billingcode"),dataset.get("source"),dataset.get("trnxid") ,dataset.get("adnetid"),
          dataset.get("adtrnxid"),"1",dataset.get("itemId"),"4","null",dataset.get("dirthash")," ")
          
          //get API Json Response context
          def  slurperStepInitialise= context.jsonStepInitialise          
	     def  responseStatus= slurperStepInitialise.result.status	
	     def responseCode=slurperStepInitialise.result.code
	     def responseMessage= slurperStepInitialise.result.message
	     def responseMsisdn=slurperStepInitialise.userStatus.msisdn
	     def cgTransactionId=slurperStepInitialise.cgTransactionId

 		controllerobject.VVACGController(cgTransactionId,responseMsisdn,"Success","400","57")
//confirm by CG callback notificaiton	     
//	callbackResponse=talendobject.VODAFONECGCallback( msisdn,dataset.get("result"))
  notifyResponse=talendobject.Vodafone_Notify(msisdn, dataset.get("productname"), dataset.get("servicename"), dataset.get("chargingMode"),"WAP","MH","ACT","SUCCESS")
  	if(i==1)
{
	tc--;
	continue;
	
}

   long startTime = System.currentTimeMillis();
while(true){
//validate DB values       	
 usersubmap= datasetobject.getUserData(msisdn,dataset.get("itemId"))
 	if(	usersubmap.get("subscription_status_id").toString()== dataset.get("expid"))

					{
						break;
					}
					else
					{
						long currentTime = System.currentTimeMillis();
						if((currentTime-startTime)<timeoutPeriod){
							sleep(200);
						}else{
							break;

						}}
						}
if(responseStatus=="OK"
&&responseMsisdn==msisdn
&& responseCode=="VE002"
&& responseMessage=="Consent Redirect"
&& usersubmap.get("subscription_status_id").toString() == dataset.get("expid")
&& usersubmap.get("validity").toString() == dataset.get("expval")
&& usersubmap.get("current_billing_code").toString() == dataset.get("expbillcode")
&& usersubmap.get("user_source").toString() == dataset.get("source")
&& usersubmap.get("credits").toString()==dataset.get("expcredits")
&& usersubmap.get("last_notification_status_id").toString()==dataset.get("activityres")
) 
{   
//calling log api test method	

def log_2nd_conf= logapi.assertBaaSLogAPI(msisdn,"PAGEVIEW_LOG_2nd_CONF","2","2",dataset.get("2ndconfactivityres").toString(),"1",
dataset.get("billingcode"),"1","null","WAP",dataset.get("expchargemode"),"false",
 dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),'30',dataset.get("dirthash"))  	

if (log_2nd_conf=="failed"){
 expected2ndConf=context.expected
 actual2ndConf=context.actual}
//dataset.get("expchargemode")
def log_act_notify= logapi.assertBaaSLogAPI(msisdn,"ACTIVATION_CHARGING_NOTIFICATION","3","3",dataset.get("activityres").toString(),dataset.get("expid"),
dataset.get("expbillcode"),"1",dataset.get("billingcode"),"NOTIFICATION",dataset.get("expchargemode"),"false"
,dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),'40',dataset.get("dirthash")) 
if (log_act_notify=="failed"){
 expectedActNotification=context.expected
 actualActNotification=context.actual}

// validate ad network logs
if(dataset.get("adnetinfo")){
ad_network_log=logapi.assertAdNetworkInfo(msisdn,"ACTIVATION_CHARGING_NOTIFICATION",dataset.get("adnetid"),dataset.get("adtrnxid"))

}

else {ad_network_log= "NA"}

//print result
def passresult=("\r\n"+"[VODAFONE][WAP][ACT]"+dataset.get("tcname") +" bass test: passed"+">>>2nd_conf_log:"+log_2nd_conf+">>> act_charging_notification_log: "+log_act_notify+">>> adnetwork_info_log: "+ad_network_log+"\r\n")
logFile.append passresult
log.info passresult

if (log_act_notify=="passed" &&  log_2nd_conf=="passed" && (ad_network_log=="passed"  || ad_network_log=="NA" )) {pass++} 
else {fail++
   if(log_2nd_conf=="failed"){
   def Expected= "Expected_2nd_Conf >>>" +expected2ndConf+"\r\n"
  def actual= "Found_2nd_Conf >>>" + actual2ndConf+"\r\n"
log.error Expected
logFile.append  Expected
log.error actual
logFile.append  actual
   }
	
if(log_act_notify=="failed"){
 def Expected="Expected_ACT_Notification >>>" +expectedActNotification+"\r\n"
 def actual= "Found_ACT_Notification >>>" + actualActNotification+"\r\n"
log.error Expected
logFile.append  Expected
log.error actual
logFile.append  actual
}  
   
   if(ad_network_log=="failed"){
def Expected= "Expected_Ad_Notification >>>" +context.expectedAdLog
 def Actual= "Found_Ad_Notification >>>" + context.actualAdLog
 log.error Expected
logFile.append  Expected
log.error Actual
logFile.append  Actual}
}}  	

else{ 	
    fail++
def failresult= ("\r\n"+"[VODAFONE][WAP][ACT]"+dataset.get("tcname") +"  is failed"+"\r\n")
def expected= ( "\r\n"+"Expected Values:sub_status_id="+dataset.get("expid")+",Validity="+dataset.get("expval")+",curr_billing_code="+dataset.get("expbillcode")+",user_source=" +dataset.get("source")+" credits="+dataset.get("expcredits")+" responseStatus==OK, responseCode==VE002"+"responseMessage=Consent Redirect"+" activityResult="+dataset.get("activityres")+"\r\n")
def actual=  ("\r\n"+"But Found: sub_status_id="+usersubmap.get("subscription_status_id")+",Validity="+usersubmap.get("validity")+ ",curr_billing_code="+usersubmap.get("current_billing_code")+",user_source=" +usersubmap.get("user_source")+"credits="+usersubmap.get("credits")+"responsestatus="+responseStatus+"responseCode= "+responseCode+"responseMessage="+responseMessage+" activityResult="+usersubmap.get("last_notification_status_id")+"\r\n")
log.error failresult
log.error expected
log.error actual
logFile.append failresult+"\r\n"+expected +"\r\n" + actual

	} }
	catch(Exception ex){
			def err= dataset.get("tcname")+">>>[VODAFONE][WAP][ACT]API Response is not proper<<<"
			log.error err
			logFile.append err
			
 }}
	} 
def summary=  ("\r\n"+date+" Execution Summary of [VODAFONE][WAP][ACT]"+context.getCurrentStep().getLabel()+ "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary ]]></script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

def workspace = testRunner.testCase.testSuite.project.workspace

def lib = (workspace==null) ? 
  ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew(context.expand('${projectDir}')+"/BaaS-Util.xml") :  workspace.getProjectByName("BaaS_Util")
if(!lib.open &amp;&amp; workspace!=null) 
{workspace.openProject(lib)
}

lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Log API"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["DataSet"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Backend Job"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['API Run'].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Talend_API'].testSteps["Talend_API_Run"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['Controllers'].run(testRunner, context)

def datasetobject = context.dataSet

String inputFile = context.expand('${#Global#input_path}')+ testRunner.testCase.testSuite.name+".xlsx"
log.info inputFile
datasetobject.getExcelDataIndex(inputFile,testRunner.testCase.name)

//establish db connection
datasetobject.getDBConnection()
</con:setupScript><con:tearDownScript/><con:properties/><con:reportParameters/></con:testCase>