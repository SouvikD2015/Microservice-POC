<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="fc96c7c5-9370-4306-9ac2-eee744d02d80" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ActivationFlow-WAP" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting><con:setting id="fc96c7c5-9370-4306-9ac2-eee744d02d80fileName">ActivationFlow-WAP</con:setting></con:settings><con:testStep type="groovy" name="Verify EVS Activation Flow" id="02066b43-b9a9-490d-be40-ee885dce80e1"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.sql.Sql 
import java.io.*
import java.text.*
import java.util.*

//Log API class object
def logapi = context.logAPI
//Dataset class object
def datasetobject = context.dataSet
def controllerobject=context.controllers
def apirunobject=context.apiRun
def talendobject=context.talendApiRun

Date date=new Date()
def logFile=context.resultfile

def title=("\r\n"+date+"Executing>>>>"+context.getCurrentStep().getLabel()+"\r\n")
log.info title
logFile.append title


Map<String,String>  dataset  = new HashMap<String,String> ();
Map<String,String>  usersubmap  = new HashMap<String,String> ();
int tc=0
int pass=0
int fail=0
def expected2ndConf
def actual2ndConf
def expectedActNotification
def actualActNotification
long timeoutPeriod = 360000;

 //iteratig excel sheet rows to execute the test case 
for (int i=1;i<= context.rowCount;i++)
{
def callbackResponse
def notifyResponse
  dataset=datasetobject.getRowDataMap(i)	
  	if(dataset.get("isexecutable")  )
	{	
	try {
		tc++;		
		msisdn= dataset.get("userid")
		//reset user 		
		datasetobject.resetUser(msisdn)
		datasetobject.freeTrialHisotry(msisdn,"1",dataset.get("lastfreetrialtime"),"1919100034")
     
		//baas activation api execution 	
          apirunobject.stepInitiliazer(msisdn,dataset.get("billingcode"),dataset.get("source"),dataset.get("trnxid") ,dataset.get("adnetid"),
          dataset.get("adtrnxid"),"1","1","2","null",dataset.get("dirthash")," ")
          //get API Json Response context
          def  slurperStepInitialise= context.jsonStepInitialise          
	     def  responseStatus= slurperStepInitialise.result.status
	     def responseCode=slurperStepInitialise.result.code
	     def responseMessage= slurperStepInitialise.result.message
	     def responseMsisdn=slurperStepInitialise.userStatus.msisdn
          def cgUrl=slurperStepInitialise.cgURL
          def transid=slurperStepInitialise.cgTransactionId

      //baas confirmation api execution                 
       controllerobject.CGController(transid,"91")	


  	if(i==1)
{
	tc--;
	continue;
	
}        //Notify      
	    def 	propertyNotify= testRunner.testCase.getTestStepByName("Properties")
      	propertyNotify.setPropertyValue("msisdn",msisdn)	 	
		propertyNotify.setPropertyValue("keyword",dataset.get("keyword"))
		propertyNotify.setPropertyValue("channel",dataset.get("channel"))
		propertyNotify.setPropertyValue("type",dataset.get("notifytype"))
		propertyNotify.setPropertyValue("amount",dataset.get("amount"))
		propertyNotify.setPropertyValue("packageid",dataset.get("package"))
		
		def 	stepNotifyRx= testRunner.testCase.getTestStepByName("EVS_Notify")	 
		stepNotifyRx.getHttpRequest().setEndpoint(context.expand('${#Global#talend_endpoint}'))    	 
	   	stepNotifyRx.run(testRunner,testRunner.getRunContext())	
	}
		catch(Exception ex){
		fail++
			def err= "\r\n"+dataset.get("tcname")+">>>[EVS][WAP][ACT]API Response is not proper<<<"+"\r\n"
			log.error err
			logFile.append err
			
 }
 }}
 
log.info "All activation calls made"
	for (int k=2;k<= context.rowCount;k++)
{
	try{
def callbackResponse
def notifyResponse

  dataset=datasetobject.getRowDataMap(k)	
  	msisdn= dataset.get("userid")
  	if(dataset.get("isexecutable")  )
	{
def startTime=System.currentTimeMillis();
while(true){	   	
 //assert the response & db values
 usersubmap= datasetobject.getUserData(msisdn,"1")
if( usersubmap.get("last_notification_status_id").toString()==dataset.get("activityres"))
{
break;	
}
else{
		long currentTime = System.currentTimeMillis();
		if((currentTime-startTime)<timeoutPeriod){
				sleep(500);
				log.info "waiting for record to process"
				
			}else
			{
				log.error "Queue is taking too long to process record or last billing response status id did not match"
				break;
			}
	}
}
if(
//responseStatus=="OK"
//&&responseMsisdn==msisdn
//&& responseCode=="VE002"
//&& responseMessage=="Consent Redirect"
usersubmap.get("subscription_status_id").toString() == dataset.get("expid")
&& usersubmap.get("validity").toString() == dataset.get("expval")
&& usersubmap.get("current_billing_code").toString() == dataset.get("expbillcode")
&& usersubmap.get("user_source").toString() == dataset.get("source")
&& usersubmap.get("credits").toString()==dataset.get("expcredits")
&& usersubmap.get("last_notification_status_id").toString()==dataset.get("activityres")
) 
{   
//calling log api test method	
def log_2nd_conf= logapi.assertBaaSLogAPI(msisdn,"PAGEVIEW_LOG_2nd_CONF","2","2",dataset.get("2ndconfactivityres").toString(),"1",
dataset.get("prebillcode"),"1",dataset.get("prebillcode").toString(),dataset.get("expaccmode"),dataset.get("expchargemode"),dataset.get("isfreetrial").toString(),
 dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),'30',dataset.get("dirthash"))  	

if (log_2nd_conf=="failed"){
 expected2ndConf=context.expected
 actual2ndConf=context.actual}
//dataset.get("expchargemode")
def log_act_notify= logapi.assertBaaSLogAPI(msisdn,"ACTIVATION_CHARGING_NOTIFICATION","3","3",dataset.get("activityres").toString(),dataset.get("expid"),
dataset.get("expbillcode"),"1",dataset.get("prebillcode"),"NOTIFICATION",dataset.get("expchargemode"),dataset.get("isfreetrial").toString()
,dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),'40',dataset.get("dirthash")) 
if (log_act_notify=="failed"){
 expectedActNotification=context.expected
 actualActNotification=context.actual}

// validate ad network logs
if(dataset.get("adnetinfo")){
ad_network_log=logapi.assertAdNetworkInfo(msisdn,"ACTIVATION_CHARGING_NOTIFICATION",dataset.get("adnetid"),dataset.get("adtrnxid"))

}

else {ad_network_log= "NA"}

//print result
def passresult=("\r\n"+"[EVS][WAP][ACT]"+dataset.get("tcname") +" bass test: passed"+">>>2nd_conf_log:"+log_2nd_conf+">>> act_charging_notification_log: "+log_act_notify+">>> adnetwork_info_log: "+ad_network_log+"\r\n")
logFile.append passresult
log.info passresult

if (log_act_notify=="passed" &&  log_2nd_conf=="passed" && (ad_network_log=="passed"  || ad_network_log=="NA" )) {pass++} 
else {
	fail++
   if(log_2nd_conf=="failed"){
   def Expected= "Expected_2nd_Conf >>>" +expected2ndConf+"\r\n"
  def actual= "Found_2nd_Conf >>>" + actual2ndConf+"\r\n"
log.error Expected
logFile.append  Expected
log.error actual
logFile.append  actual
   }
	
if(log_act_notify=="failed"){
 def Expected="Expected_ACT_Notification >>>" +expectedActNotification+"\r\n"
 def actual= "Found_ACT_Notification >>>" + actualActNotification+"\r\n"
log.error Expected
logFile.append  Expected
log.error actual
logFile.append  actual
}  
   
   if(ad_network_log=="failed"){
def Expected= "Expected_Ad_Notification >>>" +context.expectedAdLog
 def Actual= "Found_Ad_Notification >>>" + context.actualAdLog
 log.error Expected
logFile.append  Expected
log.error Actual
logFile.append  Actual}
}}  	

else{ 	
    fail++
def failresult= ("\r\n"+"[EVS][WAP][ACT]"+dataset.get("tcname") +"  is failed"+"\r\n")
def expected= ( "\r\n"+"Expected Values:sub_status_id="+dataset.get("expid")+",Validity="+dataset.get("expval")+",curr_billing_code="+dataset.get("expbillcode")+",user_source=" +dataset.get("source")+" credits="+dataset.get("expcredits")+" activityResult="+dataset.get("activityres")+"\r\n")
def actual=  ("\r\n"+"But Found: sub_status_id="+usersubmap.get("subscription_status_id")+",Validity="+usersubmap.get("validity")+ ",curr_billing_code="+usersubmap.get("current_billing_code")+",user_source=" +usersubmap.get("user_source")+"credits="+usersubmap.get("credits")+" activityResult="+usersubmap.get("last_notification_status_id")+"\r\n")
log.error failresult
log.error expected
log.error actual
logFile.append failresult+"\r\n"+expected +"\r\n" + actual

	} }}
	catch(Exception ex){
		fail++
			def err= "\r\n"+dataset.get("tcname")+">>>[EVS][WAP][ACT]API Response is not proper<<<"+"\r\n"
			log.error err
			logFile.append err
			
 }}

def summary=  ("\r\n"+date+" Execution Summary of [EVS][WAP][ACT]"+context.getCurrentStep().getLabel()+ "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary]]></script></con:config></con:testStep><con:testStep type="restrequest" name="EVS_Notify" id="ed74b1b2-a34f-460b-ad31-d43048130120" disabled="true"><con:settings/><con:config service="EVS_Notify" resourcePath="/evs/notification" methodName="Notification" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="EVS_Notify" id="60c7c222-bdb8-4975-bf5a-1e439deeb94a" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://192.168.249.94:8088</con:endpoint><con:request><![CDATA[<Call_url><transaction_id1>137882224</transaction_id1><transaction_id2>null</transaction_id2><msisdn>${Properties#msisdn}</msisdn><package_id>${Properties#packageid}</package_id><TransactionType>${Properties#type}</TransactionType><Amount>${Properties#amount}</Amount><keyword>${Properties#keyword}</keyword><Channel>${Properties#channel}</Channel></Call_url>]]></con:request><con:originalUri>http://192.168.249.94/evs/notification</con:originalUri><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="properties" name="Properties" id="6bb910bd-30a9-456c-b709-4aec6171c60e"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>channel</con:name><con:value>WAP</con:value></con:property><con:property><con:name>type</con:name><con:value>SUB_FAIL</con:value></con:property><con:property><con:name>msisdn</con:name><con:value>91971000010</con:value></con:property><con:property><con:name>amount</con:name><con:value>0</con:value></con:property><con:property><con:name>keyword</con:name><con:value>0</con:value></con:property><con:property><con:name>packageid</con:name><con:value>477</con:value></con:property></con:properties></con:config></con:testStep><con:setupScript>import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

def workspace = testRunner.testCase.testSuite.project.workspace

def lib = (workspace==null) ? 
  ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew(context.expand('${projectDir}')+"/BaaS-Util.xml") :  workspace.getProjectByName("BaaS_Util")
if(!lib.open &amp;&amp; workspace!=null) 
{workspace.openProject(lib)
}

lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Log API"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["DataSet"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Backend Job"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['API Run'].run(testRunner, context)
lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['Controllers'].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Talend_API'].testSteps["Talend_API_Run"].run(testRunner, context)

def datasetobject = context.dataSet

String inputFile = context.expand('${#Global#input_path}')+ testRunner.testCase.testSuite.name+".xlsx"

datasetobject.getExcelDataIndex(inputFile,testRunner.testCase.name)

//establish db connection
datasetobject.getDBConnection()
</con:setupScript><con:tearDownScript/><con:properties/><con:reportParameters/></con:testCase>