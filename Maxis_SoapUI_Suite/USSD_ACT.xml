<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="395d2d36-b0d9-404f-81d1-4cfca8b4fc3a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="USSD_ACT" searchProperties="true" disabled="true" xmlns:con="http://eviware.com/soapui/config"><con:description>This will validate the user state tranistions based on the Carrier response received. </con:description><con:settings><con:setting id="395d2d36-b0d9-404f-81d1-4cfca8b4fc3afileName">USSD_ACT</con:setting></con:settings><con:testStep type="groovy" name="Maxis_USSD_Flow" id="b1e7545c-2e21-46cc-a023-37d8c76b3764"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.sql.Sql 
import java.io.*
import java.text.*
import java.util.*

//Log API class object
def logapi = context.logAPI
//Dataset class object
def datasetobject = context.dataSet
//API execution class object
def apirunobject=context.apiRun
def talendobject=context.talendApiRun

Date date=new Date()
def logFile=context.resultfile

def title=("\r\n"+date+"Executing>>>>>>>>>>>>>>>>>>>[Maxis][USSD]"+context.getCurrentStep().getLabel()+"\r\n")
log.info title

Map<String,String>  dataset  = new HashMap<String,String> ();
Map<String,String>  usersubmap  = new HashMap<String,String> ();
int tc=0
int pass=0
int fail=0
def expected2ndConf
def actual2ndConf
def expectedActNotification
def actualActNotification
long timeoutPeriod=5000;

 //iteratig excel sheet rows to execute the test case 
for (int i=1;i<= context.rowCount;i++)
{

def baas_api_log
  dataset=datasetobject.getRowDataMap(i)	
  	if(dataset.get("isexecutable")  )
	{	
		tc++;		
		msisdn= dataset.get("userid")
		//reset user 		
		datasetobject.resetUser(msisdn)
				
//Notify on Talend end point     
	    def 	propertyNotify= testRunner.testCase.getTestStepByName("Properties")
      	propertyNotify.setPropertyValue("msisdn",msisdn)	 	
		propertyNotify.setPropertyValue("appid",dataset.get("appid"))
		propertyNotify.setPropertyValue("message",dataset.get("message"))
			
		def 	stepNotifyRx= testRunner.testCase.getTestStepByName("Maxis_USSD")	 
		stepNotifyRx.getHttpRequest().setEndpoint(context.expand('${#Global#talend_endpoint}'))    	 
	   	stepNotifyRx.run(testRunner,testRunner.getRunContext())	

def startTime=System.currentTimeMillis();
while(true){	   	
 //assert the response & db values
 usersubmap= datasetobject.getUserData(msisdn,dataset.get("itemid"))
 
if( usersubmap.get("last_notification_status_id").toString()==dataset.get("activityres"))
{
break;	
}
else{
		long currentTime = System.currentTimeMillis();
		if((currentTime-startTime)<timeoutPeriod){
				sleep(500);
				log.info "waiting for record to process"
				
			}else
			{
				log.error "Queue is taking too long to process record or last billing response status id did not match"
				break;
			}
	}
}
//validate DB values       	
 usersubmap= datasetobject.getUserData(msisdn,"4084")
	if( 	usersubmap.get("subscription_status_id").toString() ==  dataset.get("expid") &&
 		usersubmap.get("validity").toString() ==  dataset.get("expval") &&
 		usersubmap.get("current_billing_code").toString() == dataset.get("expbillcode") &&
 		usersubmap.get("last_notification_status_id").toString()==dataset.get("notifyid") 
  		)
	{
	
      baas_api_log= logapi.assertBaaSLogAPI(msisdn,"ACTIVATION_CHARGING_NOTIFICATION",dataset.get("activitytype"),dataset.get("billingactionid"),dataset.get("activityres").toString(),dataset.get("expid") ,dataset.get("expbillcode"),
  	"1", dataset.get("prebillcode"),dataset.get("expaccmode"),dataset.get("expchargemode"),dataset.get("isfreetrial").toString()
  	,dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),dataset.get("sequence").toString(),null)
  	
    def passresult =("\r\n"+"[MAXIS][USSD][ACT]"+dataset.get("tcname") +" bass test: passed"+">>>>>>>>>> user_baas_logAPI log: "+baas_api_log+"\r\n")
log.info passresult
logFile.append passresult
  	
  	if (baas_api_log=="passed" || baas_api_log=="NA")
  	{
  		pass++
  		} 
  	else if(baas_api_log=="failed")
  	{
  		fail++
  def expected= "Expected>>>>>>>>>>" +context.expected+"\r\n"
def actual="Found>>>>>>>>>>" + context.actual+"\r\n"
log.error expected
logFile.append  expected
log.error actual
logFile.append  actual
  	}
  	else if(baas_api_log=="no record found in log api db")
  	{
  		fail++
  	}
	}
	 
	else{
		   fail++
 def failresult= ("\r\n"+i+"-***********************************[Maxis][USSD][ACT]"+dataset.get("tcname") +"  is failed" +"******************************************"+"\r\n")
log.info failresult
logFile.append failresult
def expected= ( "\r\n"+"Expected Values:sub_status_id="+dataset.get("expid")+",Validity="+dataset.get("expval")+",curr_billing_code="+dataset.get("expbillcode")+"\r\n")
log.error expected
logFile.append  expected
def actual= ("\r\n"+"But Found: sub_status_id="+usersubmap.get("subscription_status_id")+",Validity="+usersubmap.get("validity")+ ",curr_billing_code="+usersubmap.get("current_billing_code")+"\r\n")
log.error actual
logFile.append  actual
	} }}
	
def summary=  ("\r\n"+date+" Execution Summary of "+context.getCurrentStep().getLabel()+"\r\n" + "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary
]]></script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="bacebafc-d71f-4ea0-a783-108d69121345"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>appid</con:name><con:value>sms</con:value></con:property><con:property><con:name>message</con:name><con:value>SUB</con:value></con:property><con:property><con:name>msisdn</con:name><con:value>91971000043</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="request" name="Maxis_USSD" id="3b169ce7-5d06-4881-afbf-b3f8e403b708" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>deliverMessageReceiverSoapBinding</con:interface><con:operation>deliverMOMessage</con:operation><con:request name="Maxis_USSD" id="7291a19a-db62-410a-a80f-2b1c83cae74e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://192.168.249.94:18040/services/maxis-wap/ussd</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:jax="http://jaxrpcstyle.server.webservice.maxis.vuclip.com">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <jax:deliverMOMessage soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">\r
         <appID xsi:type="xsd:int">${Properties#appid}</appID>\r
         <loginID xsi:type="xsd:string">1623</loginID>\r
         <passwd xsi:type="xsd:string">1623</passwd>\r
         <authCode xsi:type="xsd:string">601123685182</authCode>\r
         <dateTime xsi:type="xsd:string">23122015194148</dateTime>\r
         <moid xsi:type="xsd:double">2.11028674424943264E17</moid>\r
         <shortCode xsi:type="xsd:string">23280</shortCode>\r
         <msid xsi:type="xsd:string">${Properties#msisdn}</msid>\r
         <message xsi:type="xsd:string">${Properties#message}</message>\r
         <language xsi:type="xsd:int">0</language>\r
      </jax:deliverMOMessage>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="df113072-9e25-491c-98f0-2146ea36464a"/><con:credentials><con:selectedAuthProfile>No Authorization</con:selectedAuthProfile><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:setupScript>import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

def workspace = testRunner.testCase.testSuite.project.workspace

def lib = (workspace==null) ? 
  ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew(context.expand('${projectDir}')+"/BaaS-Util.xml") :  workspace.getProjectByName("BaaS_Util")
if(!lib.open &amp;&amp; workspace!=null) 
{workspace.openProject(lib)
}

lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Log API"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["DataSet"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Backend Job"].run(testRunner, context)

lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['API Run'].run(testRunner, context)

lib.testSuites['Common Util'].testCases['Talend_API'].testSteps["Talend_API_Run"].run(testRunner, context)

def datasetobject = context.dataSet

String inputFile = context.expand('${#Global#input_path}')+ testRunner.testCase.testSuite.name+".xlsx"

datasetobject.getExcelDataIndex(inputFile,testRunner.testCase.name)

//establish db connection
datasetobject.getDBConnection()
</con:setupScript><con:tearDownScript/><con:properties/><con:reportParameters/></con:testCase>