<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="2ec66c01-c3b9-4603-b3be-fff2fc83ef3f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MO_ACT_Flow" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="2ec66c01-c3b9-4603-b3be-fff2fc83ef3ffileName">MO_ACT_Flow</con:setting></con:settings><con:testStep type="groovy" name="XLCom MO Activation FLow" id="e7b3bfdf-5ba2-4083-8bf6-5e610e4463e5"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper

Date date=new Date()
def logFile=context.resultfile
def title=("\r\n"+date+"Executing>>>>>>>>>>>>>>>>>>>"+context.getCurrentStep().getLabel()+"\r\n")
log.info  title
logFile.append title

//Log API class object
def logapi = context.logAPI
//Dataset class object
def datasetobject = context.dataSet
//API execution class object
def apirunobject=context.apiRun
def talendobject=context.talendApiRun
def nbdobject=context.nbdObject

Map<String,String>  dataset  = new HashMap<String,String> ();
Map<String,String>  usersubmap  = new HashMap<String,String> ();
int tc=0
int pass=0
int fail=0
long timeoutPeriod=5000
def expected2ndConf
def actual2ndConf
def expectedActNotification
def actualActNotification

//Calulate expected NBD
String failNBD=nbdobject.calculateXLNBD();
log.info failNBD


 //iteratig excel sheet rows to execute the test case 
for (int i=1;i<= context.rowCount;i++)
{
def NBD_CHECK="NA"

  dataset=datasetobject.getRowDataMap(i)	
  	if(dataset.get("isexecutable")  )
	{	
	try{		tc++;		
		msisdn= dataset.get("userid")
		//reset user 		
		datasetobject.resetUser(msisdn)	
		
	  //Mo Rx api execution     
	  talendobject.XL_MOReceiver(msisdn,dataset.get("keyword"))	    

def startTime=System.currentTimeMillis();
while(true){
//validate DB values
usersubmap= datasetobject.getUserData(msisdn,dataset.get("itemid"))
if(usersubmap.get("subscription_status_id").toString() ==dataset.get("expid") )
	{
		break;
	}
	else{
		long currentTime = System.currentTimeMillis();
		if((currentTime-startTime)<timeoutPeriod){
				sleep(500);
				log.info "waiting for record to process"
				
			}else
			{
				log.error "Queue is taking too long to process record or last billing response status id did not match"
				break;
			}
	}}

  
//assert the response & db values
if(
usersubmap.get("subscription_status_id").toString() == dataset.get("expid")
&& usersubmap.get("validity").toString() == dataset.get("expval")
&& usersubmap.get("current_billing_code").toString() == dataset.get("expbillcode")
&& usersubmap.get("user_source").toString() == dataset.get("source")
&& usersubmap.get("credits").toString()==dataset.get("expcredits")
&& usersubmap.get("last_billing_response_status_id").toString()==dataset.get("activityres")
&& usersubmap.get("item_id").toString()==dataset.get("itemid")
&& usersubmap.get("item_type_id").toString()=="4"
) 
{   
	if(dataset.get("nbdcheck")=='nbd')
	{
		if(usersubmap.get("next_billing_date").toString()==failNBD)
  		{
  			log.info "NBD Test is passed"
  			NBD_CHECK="passed"
  		}
  		else
  		{
  		 	log.error "NBD Test is failed"
  			def expected= "Expected="+failNBD+"\r\n"
  			log.error expected
  			def actual= "Found="+usersubmap.get("next_billing_date")+"\r\n"
  			log.error actual
  			logFile.append expected
  			logFile.append actual
  			NBD_CHECK="failed"
  		}
	}

	else if(dataset.get("nbdcheck")=='enddate')
	{
		if(usersubmap.get("next_billing_date").toString()==usersubmap.get("end_date").toString())
  		{
  			log.info "NBD Test is passed"
  			NBD_CHECK="passed"
  		}
  		else
  		{
  		 	log.error "NBD Test is failed"
  			def expected= "Expected="+usersubmap.get("end_date")+"\r\n"
  			log.error expected
  			def actual= "Found="+usersubmap.get("next_billing_date")+"\r\n"
  			log.error actual
  			logFile.append expected
  			logFile.append actual
  			NBD_CHECK="failed"
  		}
	}	
	
	//calling log api test method	
def log_act_notify= logapi.assertBaaSLogAPI(msisdn,"ACTIVATION_CHARGING_NOTIFICATION","3","3",dataset.get("activityres").toString(),dataset.get("expid"),
dataset.get("expbillcode"),"1",'null',dataset.get("expaccmode"),dataset.get("expchargemode"),dataset.get("isfreetrial").toString()
,dataset.get("integrationtype").toString(),dataset.get("customerid").toString(),dataset.get("providerid").toString(),"40",null) 
if (log_act_notify=="failed"){
 expectedActNotification=context.expected
 actualActNotification=context.actual}

//print result
def passresult= ("\r\n"+"[XLCom][MO][ACT]"+dataset.get("tcname") +" bass test: passed"+" >>> act_charging_notification_log: "+log_act_notify+"\r\n")
logFile.append passresult
log.info passresult
if (log_act_notify=="passed" ) {pass++} 
else {fail++
  	if(log_act_notify=="failed"){
    def expected=  "Expected_ACT_Notification >>>" +expectedActNotification
   def actual= "Found_ACT_Notification >>>" + actualActNotification
log.error expected
log.error actual
logFile.append "\r\n"+expected +"\r\n" + actual}  
   
}}  	

else{ 	
    fail++
def failresult=  ("\r\n"+"[XLCom][MO]"+dataset.get("tcname") +"  is failed"+"\r\n")
 def expected=  ( "\r\n"+"Expected Values:  sub_status_id="+dataset.get("expid")+",Validity="+dataset.get("expval")+",curr_billing_code="+dataset.get("expbillcode")+",user_source=" +dataset.get("source")+" credits="+dataset.get("expcredits")+"last_billing_response_status_id="+dataset.get("activityres")+"itemId="+dataset.get("itemid")+" itemTypeId=4"+"\r\n")
def actual=("\r\n"+"But Found:  sub_status_id="+usersubmap.get("subscription_status_id")+",Validity="+usersubmap.get("validity")+ ",curr_billing_code="+usersubmap.get("current_billing_code")+",user_source=" +usersubmap.get("user_source")+"credits="+usersubmap.get("credits")+" last_billing_response_status_id"+ usersubmap.get("last_billing_response_status_id")+"itemId="+usersubmap.get("item_id")+" itemTypeId="+usersubmap.get("item_type_id")+"\r\n")
log.error failresult
log.error expected
log.error actual
logFile.append failresult+"\r\n"+expected +"\r\n" + actual
 }}
	
		catch(Exception ex){

			log.error ">>>API Response is not proper<<<"+dataset.get("tcname")
		                    }
	}}
	
def summary=  ("\r\n"+date+" Execution Summary of "+context.getCurrentStep().getLabel()+"\r\n" + "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary]]></script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

def workspace = testRunner.testCase.testSuite.project.workspace

def lib = (workspace==null) ? 
  ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew(context.expand('${projectDir}')+"/BaaS-Util.xml") :  workspace.getProjectByName("BaaS_Util")
if(!lib.open &amp;&amp; workspace!=null) 
{workspace.openProject(lib)
}

lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Log API"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["DataSet"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Backend Job"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["NextBillingDate"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['API Run'].run(testRunner, context)

lib.testSuites['Common Util'].testCases['Talend_API'].testSteps["Talend_API_Run"].run(testRunner, context)

def datasetobject = context.dataSet

String inputFile = context.expand('${#Global#input_path}')+ testRunner.testCase.testSuite.name+".xlsx"

datasetobject.getExcelDataIndex(inputFile,testRunner.testCase.name)

//establish db connection
datasetobject.getDBConnection()
</con:setupScript><con:properties/><con:reportParameters/></con:testCase>