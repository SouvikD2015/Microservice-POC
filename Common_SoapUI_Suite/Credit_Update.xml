<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="50e2589c-c975-4423-9cf2-cd5e8d8e1a7a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Credit_Update" searchProperties="true" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="50e2589c-c975-4423-9cf2-cd5e8d8e1a7afileName">Credit_Update</con:setting></con:settings><con:testStep type="groovy" name="Update_Credit_API" id="afb8b8ac-5200-4c19-bebf-0084fbefbb56"><con:settings/><con:config><script><![CDATA[import groovy.json.JsonSlurper
import groovy.sql.Sql

Date date=new Date()
def logFile=context.resultfile
def title=("\r\n"+"Executing>>>>>>>>>>>>>>>>>>>"+context.getCurrentStep().getLabel()+"\r\n")

logFile.append title


// get db connection object
def sql = context.dbConn
//Dataset class object
def datasetobject = context.dataSet
//API execution class object
def apirunobject=context.apiRun

Map dataset  = new HashMap();
int subid=0
int dbupdatedcredit=0
int tc=0
int pass=0
int fail=0
 
for (int i=1;i<= context.rowCount;i++)

{         
	dataset=datasetobject.getRowDataMap(i)		
  	  	if(dataset.get("isexecutable"))
	{	
tc++
msisdn= dataset.get("userid")
 //reset user 		
datasetobject.resetUser(msisdn)  

//Create Test User
datasetobject.createUser(dataset.get("customerid"),dataset.get("providerid"),msisdn,dataset.get("billingcode"),dataset.get("subbillingcode"),dataset.get("currbillingcode"),dataset.get("substate"),
       dataset.get("startdate"),dataset.get("enddate"),dataset.get("subdate"),dataset.get("source"),dataset.get("nbd"),dataset.get("currcredit"),msisdn,"1","2","1","kp=test") 

// get subscription id
query="select subscription_id from user_subscription where msisdn='"+msisdn+"'"
sql.eachRow(query)	
	 { row ->  
	 subid=row[0]
	 
	 }	
	 try
	 {	
	 	
		apirunobject.stepUpdateCredit(subid.toString(),dataset.get("creditcount").toString())
          def updateCreditResponse=context.jsonUpdateCredit
          
          def responsesubid=updateCreditResponse.subscriptionId
	     def responseupdatecredit=updateCreditResponse.updatedCreditCount
	     def responsestatus= updateCreditResponse.result.status
	     def responsecode=updateCreditResponse.result.code
	     def responsemessage= updateCreditResponse.result.message	   
		
//get updated credit count for the user
query1="select credits from user_subscription where subscription_id='"+subid+"'"
sql.eachRow(query1)	
	 { row1 ->  
	dbupdatedcredit=row1[0]

	 }	 
if (responsesubid==subid.toString()
&& responseupdatecredit==dbupdatedcredit
&& dbupdatedcredit.toString()== dataset.get("expcredits")
&& responsestatus==dataset.get("status")
&& responsecode==dataset.get("code")
&& responsemessage==dataset.get("message")
)
{
	pass++
	//print result
def passresult= ("\r\n"+"[UpdateCredit]"+dataset.get("tcname") +">>>>>: passed"+"\r\n")
logFile.append passresult
log.info passresult
}

else{
	fail++
	def failresult=("\r\n"+"[UpdateCredit]"+dataset.get("tcname") +">>>>>: failed"+"\r\n")
	def expected= ("\r\n"+"Expected Values:"+"subid="+subid+" ,expcredits="+dataset.get("expcredits")+" status="+dataset.get("status")+" code="+dataset.get("status")+" message="+dataset.get("message")+"\r\n")
def actual= ("\r\n"+"But Found :"+"subid="+responsesubid+" ,expcredits="+responseupdatecredit+" status="+responsestatus+" code="+responsecode+" message="+responsemessage+"\r\n")
logFile.append failresult
log.info failresult
logFile.append expected
log.info expected
logFile.append actual
log.info actual
	}
}
catch(Exception ex){

			def errmsg= dataset.get("tcname")+">>>API Response is not proper<<<"
			log.error errmsg
			logFile.append errmsg
 }
 }	 
	}
	
def summary=  ("\r\n"+date+" Execution Summary of "+context.getCurrentStep().getLabel()+"\r\n" + "Total Executed="+tc +"\r\n"+"Total Pass="+pass +"\r\n"+"Total Fail="+fail+"\r\n")
logFile.append summary
log.info summary
]]></script></con:config></con:testStep><con:setupScript>import com.eviware.soapui.model.project.ProjectFactoryRegistry
import com.eviware.soapui.impl.wsdl.WsdlProjectFactory

def workspace = testRunner.testCase.testSuite.project.workspace

def lib = (workspace==null) ? 
  ProjectFactoryRegistry.getProjectFactory(WsdlProjectFactory.WSDL_TYPE).createNew(context.expand('${projectDir}')+"/BaaS-Util.xml") :  workspace.getProjectByName("BaaS_Util")
if(!lib.open &amp;&amp; workspace!=null) 
{workspace.openProject(lib)
}

lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Log API"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["DataSet"].run(testRunner, context)
lib.testSuites['Common Util'].testCases['Common Methods'].testSteps["Backend Job"].run(testRunner, context)

lib.testSuites['Common Util'].testCases['BaaS API'].testSteps['API Run'].run(testRunner, context)

lib.testSuites['Common Util'].testCases['Talend_API'].testSteps["Talend_API_Run"].run(testRunner, context)

def datasetobject = context.dataSet
//read excel data column index
String inputFile = context.expand('${#Global#input_path}')+ testRunner.testCase.testSuite.name+".xlsx"
datasetobject.getExcelDataIndex(inputFile,testRunner.testCase.name)

//establish db connection
datasetobject.getDBConnection()
</con:setupScript><con:properties/><con:reportParameters/></con:testCase>